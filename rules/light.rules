import org.joda.time.*
import org.openhab.core.library.types.*
import org.openhab.model.script.actions.*
import org.openhab.core.persistence.*

val boolean previsdark = false

rule "Turn Off Lights at Midnight"
  when
    Time cron "0 0 0 ? * * *"
  then
    logDebug("rules", "Turn off Lights at Midnight")
    sendCommand(Living_Room_Lamp_Dimmer, 0)
    sendCommand(Kitchen_Lamp_Dimmer, 0)
  end
  
rule "Turn On Lights in the Morning"
  when
    Time cron "0 30 5 ? * * *"
  then
    logDebug("rules", "Turn On Lights in the Morning")
    sendCommand(Living_Room_Lamp_Dimmer, 60)
    sendCommand(Kitchen_Lamp_Dimmer, 60)
  end
  
rule "Turn On/Off Lights at Dusk/Dawn"
  when
    Time cron "0 * * * * ?"
  then
    var DateTime daystart = new DateTime((dawnEnd.state as DateTimeType).calendar.timeInMillis)
    var DateTime dayend = new DateTime((duskEnd.state as DateTimeType).calendar.timeInMillis)
    val boolean isdark = now.isBefore(daystart) || now.isAfter(dayend)
    //logDebug("rules", "Current "+isdark)
    //logDebug("rules", "Prev "+previsdark)
    if (isdark && previsdark == false) {
      logDebug("rules", "It's Dark transition!")
      sendCommand(Living_Room_Lamp_Dimmer, 100)
      sendCommand(Kitchen_Lamp_Dimmer, 100)
    } else if (previsdark && isdark == false) {
      logDebug("rules", "It's Light transition!")
      sendCommand(Living_Room_Lamp_Dimmer, 0)
      sendCommand(Kitchen_Lamp_Dimmer, 0)
    }
    
    // Only want to see a lamp command on transition
    previsdark = isdark
  end
