import org.joda.time.*
import org.openhab.core.library.types.*
import org.openhab.model.script.actions.*
import org.openhab.core.persistence.*

val boolean previsdark = false
val boolean lightsOffForTheNight = false
val boolean doorbellRang = false

rule "Turn Off Lights at Midnight"
  when
    Time cron "0 0 0 ? * * *"
  then
    logDebug("rules", "Midnight - Turn OFF Living_Room_Lamp_Dimmer & Kitchen_Lamp_Dimmer")
    sendCommand(Living_Room_Lamp_Dimmer, 0)
    sendCommand(Kitchen_Lamp_Dimmer, 0)
    lightsOffForTheNight = true
  end
  
rule "Turn On/Off Lights at Dusk/Dawn"
  when
    Time cron "0 * * * * ?"
  then
    var DateTime daystart = new DateTime((Sunrise_Time.state as DateTimeType).calendar.timeInMillis)
    var DateTime dayend = new DateTime((Sunset_Time.state as DateTimeType).calendar.timeInMillis)
    val boolean isdark = now.isBefore(daystart) || now.isAfter(dayend)
    
    // Living Room Light
    if (isdark && previsdark == false) {
      logDebug("rules", "Sun is Setting! - Turn ON Living Room Light")
      sendCommand(Living_Room_Lamp_Dimmer, 100)
    } else if (previsdark && isdark == false && Living_Room_Lamp_Dimmer.state >= 0) {
      logDebug("rules", "Sun is Rising! - Turn OFF Living Room Light")
      lightsOffForTheNight = false
      sendCommand(Living_Room_Lamp_Dimmer, 0)
    }
    
    // Only want to see a lamp command on transition
    previsdark = isdark
  end

rule "Great Room Light Switch!"
  when
    Item GreatRoomSwitch received update
  then
    if (GreatRoomSwitch.state == ON) {
      logDebug("rules", "GreatRoomSwitch ON - Turn ON Living_Room_Lamp_Dimmer & Kitchen_Lamp_Dimmer")
      sendCommand(Living_Room_Lamp_Dimmer, 100)
      sendCommand(Kitchen_Lamp_Dimmer, 100)
    } else if (GreatRoomSwitch.state == OFF) {
      logDebug("rules", "GreatRoomSwitch OFF - Turn OFF Living_Room_Lamp_Dimmer & Kitchen_Lamp_Dimmer")
      sendCommand(Living_Room_Lamp_Dimmer, 0)
      sendCommand(Kitchen_Lamp_Dimmer, 0)
    }
  end

rule "Basement Stair Light"
  when 
    Item BasementStairsSwitch changed
  then
    if (BasementStairsSwitch.state == ON && epsonPower.state == OFF) {
      logDebug("rules", "BasementStairsSwitch ON - Turn ON Receiver, Projector, & BasementProjectorSpot")
      sendCommand(BasementProjectorSpot, 100)
      sendCommand(epsonPower, ON)
      sendCommand(integraPower, ON)
      createTimer(now.plusSeconds(20)) [| 
        logDebug("rules", "Timer Expired - Turn OFF BasementProjectorSpot")
        sendCommand(BasementProjectorSpot, 0)]
    } else if (BasementStairsSwitch.state == OFF) {
      logDebug("rules", "BasementStairsSwitch OFF - Turn OFF BasementProjectorSpot")
      sendCommand(BasementProjectorSpot, 0)
    }
  end
  
rule "doorbell Basement Light Notification"
	when
		Item Doorbell changed to ON
	then
		var currentLightState = BasementProjectorSpot.state;
		var newLightState = if (currentLightState > 0) 0 else 100
		logDebug("rules", "Doorbell Range - Notify with Basement Spot Light")
		
		if (doorbellRang == FALSE) {
			sendCommand(BasementProjectorSpot, newLightState)
			doorbellRange = TRUE
			createTimer(now.plusSeconds(1)) [|
    		sendCommand(BasementProjectorSpot, currentLightState)]
    	createTimer(now.plusSeconds(5)) [|
    		doorbellRange = FALSE]
    }
end
