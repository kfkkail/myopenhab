import org.openhab.core.library.types.*
import org.openhab.model.script.actions.*
import org.openhab.core.persistence.*

rule "Turn Off Projector"
  when
    Item integraPower changed to OFF
  then
    if (epsonPower.state == ON) {
      logDebug("rules", "integraPower Changed - Turned off Projector")
      sendCommand(BasementProjectorSpot, 100)
      sendCommand(epsonPower, OFF)
    }
  end

// Sending Commands for Home Theater to Receiver

rule "Home Theater Mode"
  when
    Item Home_Theater_Mode changed
  then
    logDebug("rules", "Home_Theater_Mode Changed - Send Commands")
    
    // If someone changes Home_Theater_Mode via gui, change receiver state
    
    // OFF
    if (Home_Theater_Mode.state == 0) {
      if (epsonPower.state == ON) {
        sendCommand(BasementProjectorSpot, 100)
        sendCommand(epsonPower, OFF)
      }
      if (integraPower.state == ON) {
        sendCommand(integraPower, OFF)
      }
      
    // CABLE
    } else if (Home_Theater_Mode.state == 1) {
      if (epsonPower.state == OFF) {
        sendCommand(epsonPower, ON)
      }
      if (integraPower.state == OFF) {
        sendCommand(integraPower, ON)
      }
      if (integraSource.state != 1) {
        sendCommand(integraSource, 1)
      }
      
    // CHROMECAST
    } else if (Home_Theater_Mode.state == 2) {
      if (epsonPower.state == OFF) {
        sendCommand(epsonPower, ON)
      }
      if (integraPower.state == OFF) {
        sendCommand(integraPower, ON)
      }
      if (integraSource.state != 17) {
        sendCommand(integraSource, 17)
      }
      
    // FIRE TV
    } else if (Home_Theater_Mode.state == 3) {
      if (integraPower.state == OFF) {
        sendCommand(integraPower, ON)
      }
      if (integraSource.state != 35) {
        sendCommand(integraSource, 35)
      }
      
    // PANDORA NET
    } else if (Home_Theater_Mode.state == 4) {
      if (epsonPower.state == OFF) {
        sendCommand(epsonPower, ON)
      }
      if (integraPower.state == OFF) {
        sendCommand(integraPower, ON)
      }
      if (integraSource.state != 43) {
        sendCommand(integraSource, 43)
      }
    
    // PC
    } else if (Home_Theater_Mode.state == 5) {
      if (epsonPower.state == OFF) {
        sendCommand(epsonPower, ON)
      }
      if (integraPower.state == OFF) {
        sendCommand(integraPower, ON)
      }
      if (integraSource.state != 5) {
        sendCommand(integraSource, 5)
      }
    }
  end

rule "Set Home Theater Mode"
  when
    Item integraPower changed or
    Item integraSource changed or
    System started
  then
    logDebug("rules", "integraPower OR integraSource OR System Start - Set Home_Theater_Mode")
    
    //If someone changes state of receiver manually, change Home_Theater_Mode
    if (integraPower.state == OFF) {
      sendCommand(Home_Theater_Mode, 0)
    } else if (integraPower.state == ON && integraSource.state == 1) {
      sendCommand(Home_Theater_Mode, 1)
    } else if (integraPower.state == ON && integraSource.state == 17) {
      sendCommand(Home_Theater_Mode, 2)
    } else if (integraPower.state == ON && integraSource.state == 5) {
      sendCommand(Home_Theater_Mode, 3)
    } else if (integraPower.state == ON && integraSource.state == 43) {
    sendCommand(Home_Theater_Mode, 4)
    } else if (integraPower.state == ON && integraSource.state == 5) {
      sendCommand(Home_Theater_Mode, 5)
    } else {
      sendCommand(Home_Theater_Mode, 6)
    }
  end

// Sending Commands for Bar Speaker Mode to Receiver

rule "Bar Speaker Mode"
  when
    Item Bar_Speaker_Mode changed
  then
    logDebug("rules", "Bar Speaker Mode Rule Ran")
    
    if (Bar_Speaker_Mode.state == 0) {
      if (integraZ2Power.state != OFF) {
        sendCommand(integraZ2Power, OFF)
      } 
    else if (Bar_Speaker_Mode.state == 4 {
      if (integraZ2Power.state != ON) {
        sendCommand(integraZ2Power, ON)
      }
      if (integraZ2Source.state != 43) {
        sendCommand(integraZ2Source, 43)
      }
    }
  end
  
rule "Set Bar Speaker Mode"
  when
    Item integraZ2Power changed or
    Item integraZ2Source changed or
    System started
  then
    logDebug("rules", "integraZ2Power OR integraZ2Source OR System Start - Set Bar_Speaker_Mode")
    
    if (integraZ2Power.state == OFF) {
      sendCommand(Bar_Speaker_Mode, 0)
    } else if (integraZ2Power.state == ON && integraZ2Source == 43) {
      sendCommand(Bar_Speaker_Mode, 4)
    } else {
      sendCommand(Bar_Speaker_Mode, 6)
    }
  end
